$yellow: #f1c40f;
$lime: #76c900;
$navy: #0a4069;
$cyan: #57caf4;
$red: #ec008c;
$white: #fefefe;
$gray: #444;
$lightGray: lighten($gray, 30);

$transition: all linear;
$transitionSideB: all 0s linear;
$barOpacity: 0.5;
$animation: loading-animation;
$side-animation: side-loading-animation;
$side-b-animation: side-b-loading-animation;

@mixin side-loading-animation($frames, $static, $animation-name: 'side-loading-animation') {
  // Make `$static` a percentage in case it's unitless
  @if unitless($static) {
    $static: percentage($static);
  }

  // Compute the percentage of animation spent animating for each frame
  $animating: (100% - $frames * $static) / ($frames - 1);

  // Output the animation at root level
  // to make sure it doesn't crash if called in a selector
  @at-root {
    // Create an animation
    @keyframes #{$animation-name} {

      // Loop over the frames
      @for $i from 0 to $frames {
        // Compute keyframes
        $current-frame: $i * $static + $i * $animating;
        $next-frame: ($i + 1) * $static + $i * $animating;
        $halfway-frame: $i * $static / 1% + ($i - 1) * $animating + $animating / 2;

        // Output halfway styles for blur
        // Avoid a negative keyframes by making sure `$i` is at least `1`
        @if $i > 0 {
          #{$halfway-frame} {
            filter: blur(2px);
          }
        }

        // Output styles for each frame
        #{$current-frame, $next-frame} {

          background-color: hsl(($i / 100.00) * 120, 100%, 50%);
          filter: blur(0);
        }
      }
    }
  }
}

@mixin side-b-loading-animation($frames, $static, $animation-name: 'side-b-loading-animation') {
  // Make `$static` a percentage in case it's unitless
  @if unitless($static) {
    $static: percentage($static);
  }

  // Compute the percentage of animation spent animating for each frame
  $animating: (100% - $frames * $static) / ($frames - 1);

  // Output the animation at root level
  // to make sure it doesn't crash if called in a selector
  @at-root {
    // Create an animation
    @keyframes #{$animation-name} {

      // Loop over the frames
      @for $i from 0 to $frames {
        // Compute keyframes
        $current-frame: $i * $static + $i * $animating;
        $next-frame: ($i + 1) * $static + $i * $animating;
        $halfway-frame: $i * $static / 1% + ($i - 1) * $animating + $animating / 2;

        // Output halfway styles for blur
        // Avoid a negative keyframes by making sure `$i` is at least `1`
        @if $i > 0 {
          #{$halfway-frame} {
            filter: blur(2px);
          }
        }

        // Output styles for each frame
        #{$current-frame, $next-frame} {
          right: percentage((100 - $i)/100);
          background-color: hsl(($i / 100.00) * 120, 100%, 50%);
          filter: blur(0);
        }

      }
    }
  }
}

@mixin loading-animation($frames, $static, $animation-name: 'loading-animation') {
  // Make `$static` a percentage in case it's unitless
  @if unitless($static) {
    $static: percentage($static);
  }

  // Compute the percentage of animation spent animating for each frame
  $animating: (100% - $frames * $static) / ($frames - 1);

  // Output the animation at root level
  // to make sure it doesn't crash if called in a selector
  @at-root {
    // Create an animation
    @keyframes #{$animation-name} {

      // Loop over the frames
      @for $i from 0 to $frames {
        // Compute keyframes
        $current-frame: $i * $static + $i * $animating;
        $next-frame: ($i + 1) * $static + $i * $animating;
        $halfway-frame: $i * $static / 1% + ($i - 1) * $animating + $animating / 2;

        // Output halfway styles for blur
        // Avoid a negative keyframes by making sure `$i` is at least `1`
        @if $i > 0 {
          #{$halfway-frame} {
            filter: blur(2px);
          }
        }

        // Output styles for each frame
        #{$current-frame, $next-frame} {

          background-color: hsl(($i / 100.00) * 120, 100%, 50%);
          width: percentage($i/100);
          filter: blur(0);
        }
      }
    }
  }
}

@include loading-animation(
  $frames: 100,
  $static: 1%
);

@include side-loading-animation(
  $frames: 100,
  $static: 1%
);

@include side-b-loading-animation(
  $frames: 100,
  $static: 1%
)


body {
  font-family: 'Open Sans', sans-serif;
  font-size: 16px;
  font-weight: 300;
  line-height: 1em;

  text-align: center;


}

h1 {
  font-size: 2.5em;
  margin: 2em 0 .5em;
}

h2 {
  margin-bottom: 3em;
}

em, strong {
  font-weight: 700;
}

input {
  display: none;
}

header p {
  margin-bottom: 0;
}

section {
  display: flex;
  justify-content: center;
  flex-direction: column;
  margin-bottom: 2em;
  padding: 0;

  &:last-of-type {
    margin-bottom: 0;
  }

  article {
    align-self: center;
    width: 20em;
    margin-bottom: 2em;

    p, &:last-of-type {
      margin-bottom: 0;
    }
  }
}

p {
  line-height: 1.5em;

  max-width: 20em;
  margin: 1.5em auto 2em;
  padding-bottom: 1.5em;

  span {
    display: block;
  }
}

article {
  width: 70vw !important;
}

.container {
  z-index: 1;
  display: flex;
  overflow: hidden;
  flex-direction: column;
  justify-content: center;
  margin-bottom: 4em;
}

/*
*
*
START // CHART'S RULES
 -> "if you're picking code, don't forget the variables :)"
*/

.chart {
  font-size: 1em;

  perspective: 1000px;
  perspective-origin: 50% 50%;
  backface-visibility: visible;
}

$faceColor: rgba($white, .3);
$growColor: rgba($red, .6);

.growing-bar {
  //transition: $transition;
  width: 100%;
  opacity: $barOpacity;
  height: 2em;
}

.bar {
  font-size: 1em;

  position: relative;

  height: 10em;
  width: 20vw;

  transition: $transition;
  transform: rotateX(60deg) rotateY(0deg);
  -webkit-transform: rotateX(60deg) rotateY(0deg);
  -ms-transform: rotateX(60deg) rotateY(0deg);

  transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;

  .face {
    font-size: 2em;

    position: relative;

    width: 100%;
    height: 2em;

    &.side-a,
    &.side-b {
      width: 2em;
    }
  }

  .side-a {
    transform: rotateX(90deg) rotateY(-90deg) translateX(2em) translateY(1em) translateZ(1em);
    -webkit-transform: rotateX(90deg) rotateY(-90deg) translateX(2em) translateY(1em) translateZ(1em);
    -ms-transform: rotateX(90deg) rotateY(-90deg) translateX(2em) translateY(1em) translateZ(1em);
    background-color: hsl(0, 100%, 50%);
  }

  .side-b {
    transform: rotateX(90deg) rotateY(-90deg) translateX(4em) translateY(1em) translateZ(-1em);
    -webkit-transform: rotateX(90deg) rotateY(-90deg) translateX(4em) translateY(1em) translateZ(-1em);
    -ms-transform: rotateX(90deg) rotateY(-90deg) translateX(4em) translateY(1em) translateZ(-1em);
    position: absolute;
    background-color: hsl(0, 100%, 50%);
    right: 100%;
  }

  .side-0 {
    transform: rotateX(90deg) rotateY(0) translateX(0) translateY(1em) translateZ(-1em);
    -webkit-transform: rotateX(90deg) rotateY(0) translateX(0) translateY(1em) translateZ(-1em);
    -ms-transform: rotateX(90deg) rotateY(0) translateX(0) translateY(1em) translateZ(-1em);
  }

  .side-1 {
    transform: rotateX(90deg) rotateY(0) translateX(0) translateY(1em) translateZ(3em);
    -webkit-transform: rotateX(90deg) rotateY(0) translateX(0) translateY(1em) translateZ(3em);
    -ms-transform: rotateX(90deg) rotateY(0) translateX(0) translateY(1em) translateZ(3em);

  }


  .top {
    transform: rotateX(0deg) rotateY(0) translateX(0em) translateY(4em) translateZ(2em);
    z-index: 10;
  }

  .floor {
    box-shadow: 0 .1em 0.6em rgba(0, 0, 0, .3), .6em -0.5em 3em rgba(0, 0, 0, .3), 1em -1em 8em $white;
  }

}


.loader-container {

}

.load ~ .bar .side-a {
  animation: $side-animation;
  background-color: hsl(120, 100%, 50%);
}

.load ~ .bar .side-b {
  animation: $side-b-animation;
  background-color: hsl(120, 100%, 50%);
  right: 0;
}

.load ~ .bar .face .growing-bar {
  animation: $animation;
  transition: $transitionSideB;
  background-color: hsl(120, 100%, 50%);
  width: 100%;
}


.load {
  display: none;
  background-color: transparent;
}


.chart.grid {
  .exercise {

    display: flex;
    display: -ms-flexbox;
    display: -webkit-flex;

    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;

    -webkit-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;

    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;

    -webkit-align-content: stretch;
    align-content: stretch;

    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    align-items: flex-start;

    .bar {
      margin: 0 .6em;

      &:nth-child(2) {
        z-index: 8;
        -ms-flex-order: 0;
        order: 0;
        -webkit-flex: 1 1 auto;
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        -webkit-align-self: auto;
        align-self: auto;
      }

      &:first-child {
        -ms-flex-order: 0;
        order: 0;
        -webkit-flex: 1 1 auto;
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        -webkit-align-self: auto;
        align-self: auto;
        z-index: 10;
        margin-left: 0;
      }

      &:last-child {
        margin-right: 0;
        -ms-flex-order: 0;
        order: 0;
        -webkit-flex: 1 1 auto;
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        -webkit-align-self: auto;
        align-self: auto;
      }
    }
  }
}

.loading-label {
  padding: 4px !important;
  text-align: center !important;
}


